package com.bnu.springdemo.entity;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Project generated by hbm2java
 */
@Entity
@Table(name = "project", catalog = "projectinformationsharingsystem")
public class Project implements java.io.Serializable {

	private Long projectId;
	private Users users;
	private String projectName;
	private String projectDescription;
	private String projectStatus;
	private long projectDuration;
	private Date projectDate;
	private Date projectTime;
	private int pending;
	private int block;
	private Institute institute;
	private Set<RatingByRole> ratingByRoles = new HashSet<RatingByRole>(0);
	private Set<RatingByUser> ratingByUsers = new HashSet<RatingByUser>(0);
	private Set<ProjectToolsUsed> projectToolsUseds = new HashSet<ProjectToolsUsed>(
			0);
	private Set<Projectrefernces> projectreferncesesForProjectRafererId = new HashSet<Projectrefernces>(
			0);
	private Set<Projectrefernces> projectreferncesesForProjectRafreeId = new HashSet<Projectrefernces>(
			0);
	private Set<ProjectRole> projectRoles = new HashSet<ProjectRole>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<ProjectVisibility> projectVisibilities = new HashSet<ProjectVisibility>(
			0);
	private Set<ProjectSharedWith> projectSharedWiths = new HashSet<ProjectSharedWith>(
			0);
	private Set<ProjectDomain> projectDomains = new HashSet<ProjectDomain>(0);
	private Set<ProjectKeywords> projectKeywordses = new HashSet<ProjectKeywords>(
			0);

	public Project() {
	}

	public Project(Users users, String projectName, String projectStatus,
			long projectDuration, Date projectDate, Date projectTime,
			int pending, int block, String projectDescription,
			Institute institute) {
		this.users = users;
		this.projectName = projectName;
		this.projectStatus = projectStatus;
		this.projectDuration = projectDuration;
		this.projectDate = projectDate;
		this.projectTime = projectTime;
		this.pending = pending;
		this.block = block;
		this.projectDescription = projectDescription;
		this.institute = institute;
	}

	public Project(Users users, String projectName, String projectStatus,
			long projectDuration, Date projectDate, Date projectTime,
			int pending, int block, String projectDescription,
			Institute institute, Set<RatingByRole> ratingByRoles,
			Set<RatingByUser> ratingByUsers,
			Set<ProjectToolsUsed> projectToolsUseds,
			Set<Projectrefernces> projectreferncesesForProjectRafererId,
			Set<Projectrefernces> projectreferncesesForProjectRafreeId,
			Set<ProjectRole> projectRoles, Set<Comment> comments,
			Set<ProjectVisibility> projectVisibilities,
			Set<ProjectSharedWith> projectSharedWiths,
			Set<ProjectDomain> projectDomains,
			Set<ProjectKeywords> projectKeywordses) {
		this.users = users;
		this.projectName = projectName;

		this.projectStatus = projectStatus;

		this.projectDuration = projectDuration;
		this.projectDate = projectDate;
		this.projectTime = projectTime;
		this.pending = pending;
		this.block = block;
		this.institute = institute;
		this.projectDescription = projectDescription;
		this.ratingByRoles = ratingByRoles;
		this.ratingByUsers = ratingByUsers;
		this.projectToolsUseds = projectToolsUseds;
		this.projectreferncesesForProjectRafererId = projectreferncesesForProjectRafererId;
		this.projectreferncesesForProjectRafreeId = projectreferncesesForProjectRafreeId;
		this.projectRoles = projectRoles;
		this.comments = comments;
		this.projectVisibilities = projectVisibilities;
		this.projectSharedWiths = projectSharedWiths;
		this.projectDomains = projectDomains;
		this.projectKeywordses = projectKeywordses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "project_id", unique = true, nullable = false)
	public Long getProjectId() {
		return this.projectId;
	}

	public void setProjectId(Long projectId) {
		this.projectId = projectId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "username", nullable = false)
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	public void setInstitute(Institute institute) {
		this.institute = institute;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "institute_id", nullable = false)
	public Institute getInstitute() {
		return this.institute;
	}

	@Column(name = "project_name", nullable = false, length = 45)
	public String getProjectName() {
		return this.projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}

	@Column(name = "project_status", nullable = false)
	public String getProjectStatus() {
		return this.projectStatus;
	}

	public void setProjectStatus(String projectStatus) {
		this.projectStatus = projectStatus;
	}

	@Column(name = "project_duration", nullable = false)
	public long getProjectDuration() {
		return this.projectDuration;
	}

	public void setProjectDuration(long projectDuration) {
		this.projectDuration = projectDuration;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "project_date", nullable = false, length = 10)
	public Date getProjectDate() {
		return this.projectDate;
	}

	public void setProjectDate(Date projectDate) {
		this.projectDate = projectDate;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "project_time", nullable = false, length = 8)
	public Date getProjectTime() {
		return this.projectTime;
	}

	public void setProjectTime(Date projectTime) {
		this.projectTime = projectTime;
	}

	@Column(name = "pending", nullable = false)
	public int getPending() {
		return this.pending;
	}

	public void setPending(int pending) {
		this.pending = pending;
	}

	@Column(name = "block", nullable = false)
	public int getBlock() {
		return this.block;
	}

	public void setBlock(int block) {
		this.block = block;
	}

	@Column(name = "project_Description", nullable = false, length = 500)
	public String getProjectDescription() {
		return this.projectDescription;
	}

	public void setProjectDescription(String projectDescription) {
		this.projectDescription = projectDescription;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<RatingByRole> getRatingByRoles() {
		return this.ratingByRoles;
	}

	public void setRatingByRoles(Set<RatingByRole> ratingByRoles) {
		this.ratingByRoles = ratingByRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<RatingByUser> getRatingByUsers() {
		return this.ratingByUsers;
	}

	public void setRatingByUsers(Set<RatingByUser> ratingByUsers) {
		this.ratingByUsers = ratingByUsers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<ProjectToolsUsed> getProjectToolsUseds() {
		return this.projectToolsUseds;
	}

	public void setProjectToolsUseds(Set<ProjectToolsUsed> projectToolsUseds) {
		this.projectToolsUseds = projectToolsUseds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projectByProjectRafererId")
	public Set<Projectrefernces> getProjectreferncesesForProjectRafererId() {
		return this.projectreferncesesForProjectRafererId;
	}

	public void setProjectreferncesesForProjectRafererId(
			Set<Projectrefernces> projectreferncesesForProjectRafererId) {
		this.projectreferncesesForProjectRafererId = projectreferncesesForProjectRafererId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projectByProjectRafreeId")
	public Set<Projectrefernces> getProjectreferncesesForProjectRafreeId() {
		return this.projectreferncesesForProjectRafreeId;
	}

	public void setProjectreferncesesForProjectRafreeId(
			Set<Projectrefernces> projectreferncesesForProjectRafreeId) {
		this.projectreferncesesForProjectRafreeId = projectreferncesesForProjectRafreeId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<ProjectRole> getProjectRoles() {
		return this.projectRoles;
	}

	public void setProjectRoles(Set<ProjectRole> projectRoles) {
		this.projectRoles = projectRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<ProjectVisibility> getProjectVisibilities() {
		return this.projectVisibilities;
	}

	public void setProjectVisibilities(
			Set<ProjectVisibility> projectVisibilities) {
		this.projectVisibilities = projectVisibilities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<ProjectSharedWith> getProjectSharedWiths() {
		return this.projectSharedWiths;
	}

	public void setProjectSharedWiths(Set<ProjectSharedWith> projectSharedWiths) {
		this.projectSharedWiths = projectSharedWiths;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<ProjectDomain> getProjectDomains() {
		return this.projectDomains;
	}

	public void setProjectDomains(Set<ProjectDomain> projectDomains) {
		this.projectDomains = projectDomains;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "project")
	public Set<ProjectKeywords> getProjectKeywordses() {
		return this.projectKeywordses;
	}

	public void setProjectKeywordses(Set<ProjectKeywords> projectKeywordses) {
		this.projectKeywordses = projectKeywordses;
	}

}
